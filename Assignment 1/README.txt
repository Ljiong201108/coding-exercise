In this assignment, a thread_safe malloc and free library call have to be implemented. The basic idea of the implementation of malloc is to use sbrk() to allocate and manage memory. Everytime some amount of memory is asked, my malloc will find a suitable(see later) continueous segment and assign it. If such a segment does not exist, my malloc will use sbrk() to allocate more places from OS. Additionally, everytime I use sbrk() to allocate more places, I will allocate more than needed, since sbrk() is a system call and is relative slow. The allocation policy I implemented is the worst fit. I used a linked list to arrange the memory allocated and the worst fit will find the largest free available memory block, split the block accordingly and finally assign it to the segment. The advantage of worst fit is that worst fit won't leave many small memory fragmentation which cannot assign. Additionally, the linear search time can be optimized by splay tree or other balanced trees, but I think splay tree is more advantageous, since the largest block is very likely to still be the largest block or one of the largest blocks after split, which leads to a relative low expected time complexity.

To realize the thread-safe functionality, I use the idea of mutual exclusivity. To implement this, I used mutex. There is another way to do this, namely the Thread-Local storage, but I only heard about the concept about this and it may takes a long time to learn how to use it, so I chose to use mutual exclusivity.

I also wrote detailed comments in my code in order to help you to understand my code more easily.
